module XACML2ATL;

create OUT: ATL from IN: XACML;

rule Module {
	from
		s : XACML!DocumentRoot
	to
		t : ATL!Module (
			name <- 'Context2Evaluation',
			isRefining <- false,
			inModels <- im,
			outModels <- om,
			elements <- s."rule",
			commentsBefore <- '-- @atlcompiler emftvm
							   -- @path Context=/XACML/models/context_model.xmi
							   -- @path Evaluation=/XACML/models/evaluation_model.xmi'
		),
		im : ATL!OclModel (
			name <- 'IN',
			metamodel <- imm
		),
		om : ATL!OclModel (
			name <- 'OUT',
			metamodel <- omm
		),
		imm : ATL!OclModel (
			name <- 'Context'
		),
		omm : ATL!OclModel (
			name <- 'Evaluation'
		)
		do{
			'Module'.debug();
			--s.subject->first().subjectMatch->first().matchId.debug();
			t.elements <- t.elements->append(thisModule.Rule2MatchedRule_Indeterminate(t.elements))
									->append(thisModule.Rule2MatchedRule_DocumentRoot(t.elements))
									->append(thisModule.Rule2CalledRule_DocumentRoot(t.elements))
									->append(thisModule.Rule2Helper_Evaluations(t.elements))
									->append(thisModule.Rule2Helper_SymetricDifference(t.elements))
									->append(thisModule.Rule2Helper(t.elements))
									;
		}
}
--helper evaluations
lazy rule Rule2Helper_Evaluations {
	from
		s : XACML!RuleType
	
	to
		t : ATL!Helper (
			definition <- oclFD
		),
		oclFD : ATL!OclFeatureDefinition(
			feature <- attr
		),
		attr : ATL!Attribute(
			name <- 'evaluations',
			initExpression <- se,
			type <- st
		),
		se : ATL!SequenceExp(),
		st : ATL!SequenceType(
			elementType <- oclME
		),
		oclME : ATL!OclModelElement (
			name <- 'Evaluation',
			model <- om
		),
		om : ATL!OclModel (
			name <- 'Evaluation'	
		)
	do{
			'Rule2Helper_Evaluations'.debug();
	}
}
--helper symetricDifference
lazy rule Rule2Helper_SymetricDifference {
	from
		s : XACML!RuleType
	
	to
		t : ATL!Helper (
			definition <- oclFD
		),
		oclFD : ATL!OclFeatureDefinition(
			feature <-  ope2_1,
			context_ <- oclCD
		),
		oclCD : ATL!OclContextDefinition(
			context_ <- st
		),
			ope2_1 : ATL!Operation(
				name <- 'symetricDifference',
				parameters <- Sequence{pa3_1},
				returnType <- st3_2,
				body <- ie3_3
			),
				pa3_1 : ATL!Parameter(
					varName <- 'param',
					variableExp <- ve4_4,
					type <- st4_2
				),
					st4_2 : ATL!StringType(),
				st3_2 : ATL!SequenceType(
					elementType <- stringType4_3
				),
					stringType4_3 : ATL!StringType(),
				ie3_3 : ATL!IterateExp(
					source <- ve4_4,
					body <- coce4_5,
					iterators <- it4_6,
					result <-  vd4_7
				),
					ve4_4 : ATL!VariableExp (
						referredVariable <- pa3_1-- param
					),
					coce4_5 : ATL!CollectionOperationCallExp(
						operationName <- 'excluding',
						source <- ve5_0, -- y
						arguments <- ve4_8
					),
						ve5_0 : ATL!VariableExp (
						referredVariable <- vd4_7
					),
					it4_6 : ATL!Iterator(
						varName <- 'p',
						variableExp <- ve4_8
					),
					vd4_7 : ATL!VariableDeclaration(
						varName <- 'y',
						variableExp <- ve5_1,
						type <- seqType5_2,
						initExpression <- ve5_3
					),
						ve5_1 : ATL!VariableExp (
							referredVariable <- it4_6 -- p
						),
						seqType5_2 : ATL!SequenceType(
							elementType <- stringType6_1
						),
							stringType6_1 : ATL!StringType(),
						ve5_3 : ATL!VariableExp (
							referredVariable <- vd6_2
						),
							vd6_2 : ATL!VariableDeclaration(
								varName <- 'self',
								variableExp <- ve5_3
							),
					ve4_8 : ATL!VariableExp (
						referredVariable <- it4_6 -- p
					),
		st : ATL!SequenceType(
			elementType <- stringType
		),
		stringType : ATL!StringType()
	do{
			'Rule2Helper_SymetricDifference'.debug();
	}
}
--helper requestFilter
lazy rule Rule2Helper {
	from
		s : XACML!RuleType
	
	to
		t : ATL!Helper (
			definition <- oclFD
		),
		oclFD : ATL!OclFeatureDefinition(
			feature <- ope2_1,
			context_ <- oclCD2_1
		),
			ope2_1 : ATL!Operation(
				name <- 'requestFilter',
				parameters <- Sequence{pa3_1, pa3_2, pa3_3},
				returnType <- bo3_4,
				body <- oce3_5
			),
				pa3_1 : ATL!Parameter(
					varName <- 'subject',
					variableExp <- ve4_1,
					type <-st4_2
				),
					ve4_1 : ATL!VariableExp (
						referredVariable <- pa3_1
					),
					st4_2 : ATL!StringType(),
				pa3_2 : ATL!Parameter(
					varName <- 'resource',
					variableExp <- ve4_3,
					type <-st4_4
				),
					ve4_3 : ATL!VariableExp (
						referredVariable <- pa3_2
					),
					st4_4 : ATL!StringType(),
				pa3_3 : ATL!Parameter(
					varName <- 'attribute',
					variableExp <- ve4_5,
					type <-st4_6
				),
					ve4_5 : ATL!VariableExp (
						referredVariable <- pa3_3
					),
					st4_6 : ATL!StringType(),
				bo3_4 : ATL!BooleanType(),
				oce3_5 : ATL!OperatorCallExp (
					operationName <- 'and',
					source <- oce4_7,
					arguments <- Sequence{oce4_8} 
				),
					oce4_7 : ATL!OperatorCallExp (
						operationName <- 'and',
						source <- oce5_1,
						arguments <- Sequence{oce5_2}
					),
						oce5_1 : ATL!OperatorCallExp (
							operationName <- '=',
							source <- noace6_1a,
							arguments <- Sequence{ve6_2}
						),
							noace6_1a : ATL!NavigationOrAttributeCallExp (
								name <- 'value',
								source <- noace6_1b
							),
							noace6_1b : ATL!NavigationOrAttributeCallExp (
								name <- 'attributeValue',
								source <- coce7_1
							),
								coce7_1 : ATL!CollectionOperationCallExp(
									operationName <- 'first',
									source <- noace8_1
								),
									noace8_1 : ATL!NavigationOrAttributeCallExp (
										name <- 'attribute',
										source <- coce9_1
									),
										coce9_1 : ATL!CollectionOperationCallExp(
											operationName <- 'first',
											source <- noace10_1
										),
											noace10_1 : ATL!NavigationOrAttributeCallExp (
												name <- 'subject',
												source <- ve11_1
											),
												ve11_1 : ATL!VariableExp (
													referredVariable <- vd12_1
												),
													vd12_1 : ATL!VariableDeclaration(
														varName <- 'self',
														variableExp <- ve11_1
													),
							ve6_2 : ATL!VariableExp (
								referredVariable <- pa3_1
							),
						oce5_2 : ATL!OperatorCallExp (
							operationName <- '=',
							source <- noace6_2a,
							arguments <- Sequence{ve6_3} 
						),
							noace6_2a : ATL!NavigationOrAttributeCallExp (
								name <- 'value',
								source <- noace6_2b
							),
							noace6_2b : ATL!NavigationOrAttributeCallExp (
								name <- 'attributeValue',
								source <- coce7_2
							),
								coce7_2 : ATL!CollectionOperationCallExp(
									operationName <- 'first',
									source <- noace8_2
								),
									noace8_2 : ATL!NavigationOrAttributeCallExp (
										name <- 'attribute',
										source <- noace9_2
									),
										noace9_2 : ATL!NavigationOrAttributeCallExp (
											name <- 'resource',
											source <- ve10_2
										),
											ve10_2 : ATL!VariableExp (
												referredVariable <- vd11_2
											),
												vd11_2 : ATL!VariableDeclaration(
													varName <- 'self',
													variableExp <- ve10_2
												),
							ve6_3 : ATL!VariableExp (
								referredVariable <- pa3_2
							),
					oce4_8 : ATL!OperatorCallExp (
						operationName <- '=',
						source <- noace5_3a,
						arguments <- Sequence{ve5_4} 
					),
						noace5_3a : ATL!NavigationOrAttributeCallExp (
								name <- 'value',
								source <- noace5_3b
						),
						noace5_3b : ATL!NavigationOrAttributeCallExp (
							name <- 'attributeValue',
							source <- coce6_4
						),
							coce6_4 : ATL!CollectionOperationCallExp(
								operationName <- 'first',
								source <- noace7_3
							),
								noace7_3 : ATL!NavigationOrAttributeCallExp (
									name <- 'attribute',
									source <- noace8_3
								),
									noace8_3 : ATL!NavigationOrAttributeCallExp (
										name <- 'action',
										source <- ve9_3
									),
										ve9_3 : ATL!VariableExp (
											referredVariable <- vd10_3
										),
											vd10_3 : ATL!VariableDeclaration(
												varName <- 'self',
												variableExp <- ve9_3
											),
						ve5_4 : ATL!VariableExp (
							referredVariable <- pa3_3
						),
			oclCD2_1 : ATL!OclContextDefinition(
				context_ <- oclME3_4
			),
				oclME3_4 : ATL!OclModelElement (
					name <- 'RequestType',
					model <- om3_5
				),
				om3_5 : ATL!OclModel (
					name <- 'Context'	
				)
		do{
			'Rule2Helper'.debug();
		}
}
--lazy rule Indeterminate
lazy rule Rule2MatchedRule_Indeterminate {
	from
		s : XACML!RuleType
	to
		mr : ATL!LazyMatchedRule (
			name <- 'Indeterminate',
			isAbstract <- false,
			isRefining <- false,
			inPattern <- ip,
			outPattern <- op,
			isUnique <- false
		),
		ip : ATL!InPattern (
			elements <- Sequence{sipe2_1}
		),
			sipe2_1 : ATL!SimpleInPatternElement (
				varName <- 's',
				type <- oclME3_1,
				variableExp <- ve6_1
			),
				oclME3_1 : ATL!OclModelElement (
					name <- 'RequestType',
					model <- om4_1
				),
					om4_1 : ATL!OclModel (
						name <- 'Context'	
					),
		op : ATL!OutPattern (
			elements <- Sequence{sope2_2}
		),
			sope2_2 : ATL!SimpleOutPatternElement(
				varName <- 't',
				type <- oclME3_2,
				bindings <- Sequence{b3_3, b3_4, b3_5}
			),
				oclME3_2 : ATL!OclModelElement (
					name <- 'Evaluation',
					model <- om4_2
				),
					om4_2 : ATL!OclModel (
						name <- 'Evaluation',
						elements <- Sequence{oclME3_2}
					),
				b3_3 : ATL!Binding ( 
					propertyName <- 'effect',
					value <- se4_3
				),
					se4_3 : ATL!StringExp (
						stringSymbol <- 'Indeterminate'
					),
				b3_4 : ATL!Binding ( 
					propertyName <- 'rulePolicy',
					value <- oce4_4
				),
					oce4_4 : ATL!OperatorCallExp (
						operationName <- '+',
						source <- se5_1,
						arguments <- Sequence{noace5_2}
					),
						se5_1 : ATL!StringExp (
							stringSymbol <- 'Rule_'
						),
						noace5_2 : ATL!NavigationOrAttributeCallExp (
							name <- 'id',
							source <- ve6_1
						),
							ve6_1 : ATL!VariableExp (
								referredVariable <- sipe2_1
							),
				b3_5 : ATL!Binding ( 
					propertyName <- 'request',
					value <- noace4_5
				),
					noace4_5 : ATL!NavigationOrAttributeCallExp (
						name <- 'id',
						source <- ve5_3
					),
						ve5_3 : ATL!VariableExp (
							referredVariable <- sipe2_1
						)
		do{
			'lazy rule Indeterminate'.debug();
		}
}
--lazy rule DocumentRoot2Output
lazy rule Rule2MatchedRule_DocumentRoot {
	from
		s : XACML!RuleType
	to
		mr : ATL!LazyMatchedRule (
			name <- 'DocumentRoot2Output',
			isAbstract <- false,
			isRefining <- false,
			inPattern <- ip_i_c2,
			outPattern <- op_i_c2,
			isUnique <- false,
			actionBlock <- ab
		),
		ip_i_c2 : ATL!InPattern (
			elements <- Sequence{ipe_i_c2}
		),
		ipe_i_c2 : ATL!SimpleInPatternElement (
			varName <- 's',
			type <- ipet_i_c2
		),
		ipet_i_c2 : ATL!OclModelElement (
			name <- 'DocumentRoot',
			model <- om
		),
		om : ATL!OclModel (
			name <- 'Context'	
		),
		op_i_c2 : ATL!OutPattern (
			elements <- Sequence{ope_i_c2}
		),
		ope_i_c2 : ATL!SimpleOutPatternElement(
			varName <- 't',
			type <- opet_i_c2
		),
		opet_i_c2 : ATL!OclModelElement (
			name <- 'Output',
			model <- om2
		),
		om2 : ATL!OclModel (
			name <- 'Evaluation'
		),
		--ActionBlock (do)
		ab : ATL!ActionBlock(
			statements <- Sequence{bs, fs}
		),
		bs : ATL!BindingStat(
				commentsBefore <- '--iterate over rules to fill evaluations',
				source <- noace2_1,
				value <- ie2_2
		),
			noace2_1 : ATL!NavigationOrAttributeCallExp (
				name <- 'evaluations',
				source <- ve3_1
			),
				ve3_1 : ATL!VariableExp (
					referredVariable <- ope_i_c2
				),
			ie2_2 : ATL!IteratorExp(
				name <- 'select',
				source <- ie3_2,
				body <-  oce3_3,
				iterators <- Sequence{it3_4}
			),
				ie3_2 : ATL!IteratorExp(
					name <- 'collect',
					source <- coce4_1,
					body <-  noace4_2,
					iterators <- Sequence{it4_3}
				),
					coce4_1 : ATL!CollectionOperationCallExp(
						operationName <- 'flatten',
						source <- ie5_1
					),
						ie5_1 : ATL!IteratorExp(
							name <- 'collect',
							source <- noace5_1,
							body <-  ie5_2,
							iterators <- Sequence{it5_3}
						),
							noace5_1 : ATL!NavigationOrAttributeCallExp (
								name <- 'rules',
								source <- noace6_1
							),
								noace6_1 : ATL!NavigationOrAttributeCallExp (
									name <- 'traces',
									source <- ve7_1
								),
									ve7_1 : ATL!VariableExp (
										referredVariable <- vd8_1
									),
										vd8_1 : ATL!VariableDeclaration(
											varName <- 'thisModule',
											variableExp <- ve7_1
										),
							ie5_2 : ATL!IteratorExp(
								name <- 'collect',
								source <- noace6_2,
								body <-  noace6_3,
								iterators <- Sequence{it6_4}
							),
								noace6_2 : ATL!NavigationOrAttributeCallExp (
									name <- 'links',
									source <- ve7_2
								),
									ve7_2 : ATL!VariableExp (
										referredVariable <- it5_3
									),
								noace6_3 : ATL!NavigationOrAttributeCallExp (
									name <- 'targetElements',
									source <- ve7_3
								),
									ve7_3 : ATL!VariableExp (
										referredVariable <- it6_4
									),
								it6_4 : ATL!Iterator (
									varName <- 'i',
									variableExp <- ve7_3
								),
							it5_3 : ATL!Iterator (
								varName <- 'e',
								variableExp <- ve6_5
							),
								ve6_5 : ATL!VariableExp (
									referredVariable <-  vd7_4 --ERROR: must be of type VariableDeclaration (not VariableExp)
								),
									vd7_4 : ATL!VariableDeclaration(
											varName <- 'e',
											variableExp <- ve7_2
									),
					noace4_2 : ATL!NavigationOrAttributeCallExp (
						name <- 'object',
						source <- ve5_4
					),
						ve5_4 : ATL!VariableExp (
							referredVariable <- it4_3
						),
					it4_3 : ATL!Iterator (
						varName <- 'j',
						variableExp <- ve5_5
					),
						ve5_5 : ATL!VariableExp (
							referredVariable <- vd6_6 --ERROR: must be of type VariableDeclaration (not VariableExp)
						),
							vd6_6 : ATL!VariableDeclaration(
								varName <- 'j',
								variableExp <- ve5_4
							),
				oce3_3 : ATL!OperationCallExp (
					operationName <- 'oclIsTypeOf',
					source <- ve4_1,
					arguments <- Sequence{oclME4_2}
				),
					ve4_1 : ATL!VariableExp (
						referredVariable <- it3_4
					),
					oclME4_2 : ATL!OclModelElement (
						name <- 'Evaluation',
						model <- om2
					),
--					om : ATL!OclModel (
--						name <- 'Context'	
--					)
				it3_4 : ATL!Iterator (
					varName <- 'k',
					variableExp <- ve4_3
				),
					ve4_3 : ATL!VariableExp (
						referredVariable <- vd5_6 --ERROR: must be of type VariableDeclaration (not VariableExp)
					),
						vd5_6 : ATL!VariableDeclaration(
							varName <- 'k',
							variableExp <- ve4_1
						),
		--ForStat
		fs : ATL!ForStat(
			commentsBefore <- '--not matched requests = all requests - matched requests',
			iterator <- it2_3,
			collection <- oce2_4,
			statements <- Sequence{bs2, bs3}
		),
			it2_3 : ATL!Iterator (
				varName <- 'iterator',
				variableExp <- ve4_10
			),
			oce2_4 : ATL!OperationCallExp (
				operationName <- 'symetricDifference',
				source <- oce3_5,
				arguments <- Sequence{ie3_6}
			),
				oce3_5 : ATL!OperationCallExp (
					operationName <- 'allInstances', 
					source <- oclME4_3
				),
					oclME4_3 : ATL!OclModelElement (
						name <- 'RequestType', 
						model <- om5_7
					),
						om5_7 : ATL!OclModel (
							name <- 'Context',
							elements <- Sequence{oclME4_3}
						),
				ie3_6 : ATL!IteratorExp(
					name <- 'select',
					source <- ie4_4,
					body <-  oce4_5,
					iterators <- Sequence{it4_6}
				),
					ie4_4 : ATL!IteratorExp(
						name <- 'collect',
						source <- coce5_10,
						body <-  noace5_11,
						iterators <- Sequence{it5_12}
					),
					oce4_5 : ATL!OperationCallExp (
						operationName <- 'oclIsTypeOf', 
						source <- ve5_8,
						arguments <- oclME5_9
					),
						ve5_8 : ATL!VariableExp (
							referredVariable <- it4_6
						),
						oclME5_9 : ATL!OclModelElement (
							name <- 'RequestType', 
							model <- om6_7
						),
							om6_7 : ATL!OclModel (
								name <- 'Context',
								elements <- Sequence{oclME5_9}
							),
						coce5_10 : ATL!CollectionOperationCallExp(
							operationName <- 'flatten',
							source <- ie6_8
						),
							ie6_8 : ATL!IteratorExp(
								name <- 'collect',
								source <- noace7_5,
								body <-  ie7_6,
								iterators <- Sequence{it7_7}
							),
								noace7_5 : ATL!NavigationOrAttributeCallExp (
									name <- 'rules',
									source <- noace8_2
								),
									noace8_2 : ATL!NavigationOrAttributeCallExp (
										name <- 'traces',
										source <- ve9_1
									),
										ve9_1 : ATL!VariableExp (
											referredVariable <- vd10_1
										),
											vd10_1 : ATL!VariableDeclaration(
												varName <- 'thisModule',
												variableExp <- ve9_1
											),
								ie7_6 : ATL!IteratorExp(
									name <- 'collect',
									source <- noace8_3,
									body <-  noace8_4,
									iterators <- Sequence{it8_5}
								),
									noace8_3 : ATL!NavigationOrAttributeCallExp (
										name <- 'links',
										source <- ve9_2
									),
										ve9_2 : ATL!VariableExp (
											referredVariable <- it7_7
										),
									noace8_4 : ATL!NavigationOrAttributeCallExp (
										name <- 'sourceElements',
										source <- ve9_3
									),
										ve9_3 : ATL!VariableExp (
											referredVariable <- it7_7
										),
									it8_5 : ATL!Iterator (
										varName <- 'i',
										variableExp <- ve9_3
									),
								it7_7 : ATL!Iterator (
									varName <- 'e',
									variableExp <- ve9_2
								),
						noace5_11 : ATL!NavigationOrAttributeCallExp (
							name <- 'object',
							source <- ve6_9
						),
							ve6_9 : ATL!VariableExp (
								referredVariable <- it5_12
							),
						it5_12 : ATL!Iterator (
							varName <- 'j',
							variableExp <- ve6_9
						),
					it4_6 : ATL!Iterator (
						varName <- 'k',
						variableExp <- ve5_8
					),
		--BindingStat
		bs2 : ATL!BindingStat(
				source <- noace2_5,
				value <- coce2_6
		),
			noace2_5 : ATL!NavigationOrAttributeCallExp (
				name <- 'evaluations',
				source <- ve3_7
			),
				ve3_7 : ATL!VariableExp (
					referredVariable <- vd4_7
				),
					vd4_7 : ATL!VariableDeclaration(
						varName <- 'thisModule',
						variableExp <- ve3_7
					),
			coce2_6 : ATL!CollectionOperationCallExp(
				operationName <- 'append',
				source <- noace3_8,
				arguments <- Sequence{oce3_9}
			),
				noace3_8 : ATL!NavigationOrAttributeCallExp (
					name <- 'evaluations',
					source <- ve4_8
				),
					ve4_8 : ATL!VariableExp (
						referredVariable <- vd5_13
					),
						vd5_13 : ATL!VariableDeclaration(
							varName <- 'thisModule',
							variableExp <- ve4_8
						),
				oce3_9 : ATL!OperationCallExp (
					operationName <- 'Indeterminate', 
					source <- ve4_9,
					arguments <- ve4_10
				),
					ve4_9 : ATL!VariableExp (
						referredVariable <- vd5_14
					),
						vd5_14 : ATL!VariableDeclaration(
							varName <- 'thisModule',
							variableExp <- ve4_9
						),
					ve4_10 : ATL!VariableExp (
						referredVariable <- it2_3
					),
		--BindingStat
		bs3 : ATL!BindingStat(
			source <- noace2_7,
			value <- noace2_8
		),
			noace2_7 : ATL!NavigationOrAttributeCallExp (
				name <- 'evaluations',
				source <- ve3_10
			),
				ve3_10 : ATL!VariableExp (
					referredVariable <- ope_i_c2
				),
			noace2_8 : ATL!NavigationOrAttributeCallExp (
				name <- 'evaluations',
				source <- ve3_11
			),
				ve3_11 : ATL!VariableExp (
					referredVariable <- vd4_11
				),
					vd4_11 : ATL!VariableDeclaration(
						varName <- 'thisModule',
						variableExp <- ve3_11
					)
		do{
			'Rule2MatchedRule_DocumentRoot'.debug();
		}
}
--endpoint rule EndRule
lazy rule Rule2CalledRule_DocumentRoot {
	from
		s : XACML!RuleType
	to
		mr : ATL!CalledRule (
			name <- 'EndRule',
			isEndpoint <- true,
			actionBlock <- ab
		),
		--ActionBlock (do)
		ab : ATL!ActionBlock(
			statements <- Sequence{es}
		),
		es : ATL!ExpressionStat(
			expression <- oce2_1
		),
			oce2_1 : ATL!OperationCallExp (
				operationName <- 'DocumentRoot2Output',
				source <- ve3_1,
				arguments <- Sequence{coce3_2}
			),
				ve3_1 : ATL!VariableExp (
					referredVariable <- vd4_1
				),
					vd4_1 : ATL!VariableDeclaration(
						varName <- 'thisModule',
						variableExp <- ve3_1
					),
				coce3_2 : ATL!CollectionOperationCallExp(
					operationName <- 'first',
					source <- oce4_2
				),
					oce4_2 : ATL!OperationCallExp (
						operationName <- 'allInstances',
						source <- oclME5_1
					),
						oclME5_1 : ATL!OclModelElement (
							name <- 'DocumentRoot',
							model <- oclM6_1
						),
							oclM6_1 : ATL!OclModel (
								name <- 'Context'
							)
		do{
			'Rule2CalledRule_DocumentRoot'.debug();
		}
}

rule Rule2MatchedRule {
	from
		s : XACML!RuleType
	
	to
		mr : ATL!MatchedRule (
			name <- s.ruleId, --'loginRule1'
			isNoDefault <- true,
			isAbstract <- false,
			isRefining <- false,
			inPattern <- ip_i_c2,
			outPattern <- op_i_c2
		),
		ip_i_c2 : ATL!InPattern (
			elements <- Sequence{ipe_i_c2},
			filter <- operationce
		),
		ipe_i_c2 : ATL!SimpleInPatternElement (
			varName <- 's',
			type <- ipet_i_c2
		),
		--filter
		operationce : ATL!OperationCallExp (
			operationName <- 'requestFilter',
			source <- ve2_1, 
			arguments <- Sequence{se2_2, se2_3, se2_4}
		),
			ve2_1 : ATL!VariableExp (
				referredVariable <- ipe_i_c2
			),
			se2_2 : ATL!StringExp (
				stringSymbol <- s.target.subjects.anySubject.dataType
			),
			se2_3 : ATL!StringExp (
				stringSymbol <- s.target.resources.anyResource.dataType
			),
			se2_4 : ATL!StringExp (
				stringSymbol <- s.target.actions.anyAction.attributeValue.attributeId
			),
		--names: column_line
--end filter
		
		ipet_i_c2 : ATL!OclModelElement (
			name <- 'RequestType',
			model <- om
		),
		om : ATL!OclModel (
			name <- 'Context'	
		),
		op_i_c2 : ATL!OutPattern (
			elements <- Sequence{ope_i_c2}
		),
		ope_i_c2 : ATL!SimpleOutPatternElement(
			varName <- 't',
			type <- opet_i_c2,
			bindings <- Sequence{b, b2, b3}		
		),
		opet_i_c2 : ATL!OclModelElement (
			name <- 'Evaluation',
			model <- om2
		),
		om2 : ATL!OclModel (
			name <- 'Evaluation'
		),
		b : ATL!Binding ( 
			propertyName <- 'effect',
			value <- se
		),
		se : ATL!StringExp(
			stringSymbol <- s.effect.toString() --'0'
		),
		b2 : ATL!Binding ( 
			propertyName <- 'rulePolicy',
			value <- se2
		),
		se2 : ATL!StringExp(
			stringSymbol <- s.ruleId --'loginRule1'
		),
		b3 : ATL!Binding ( 
			propertyName <- 'request',
			value <- noace
		),
		noace : ATL!NavigationOrAttributeCallExp (
			name <- 'id',
			source <- ve
		),
		ve : ATL!VariableExp (
			referredVariable <- ipe_i_c2
		)	
		do{
			'Rule2MatchedRule'.debug();
		}
}
