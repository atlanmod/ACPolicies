module XACML2ATL;

create OUT: ATL from IN: XACML;

rule Module {
	from
		s : XACML!DocumentRoot
	to
		t : ATL!Module (
			name <- s.name,
			libraries <- s.libraries,
			isRefining <- s.isRefining,
			inModels <- s.inModels,
			outModels <- s.outModels,
			elements <- s.elements
		)
		do{
			'Module'.println();
		}
}

--rule MatchedRule2MatchedRule_Splitclass {
--	from
--		s : XACML!MatchedRule
--	
--	to
--		mr : ATL!MatchedRule (
--			name <- thisModule.getSplittedClasses->first(),
--			isAbstract <- false,
--			isRefining <- false,
--			inPattern <- ip_i_c2,
--			outPattern <- op_i_c2,
--			commentsBefore <- Set {'--SPLITTED RULE 1'}
--		),
--		ip_i_c2 : ATL!InPattern (
--			elements <- Sequence{ipe_i_c2}
--		),
--		ipe_i_c2 : ATL!SimpleInPatternElement (
--			varName <- self.deletedRule_Splitclass->first().inPattern.elements->first().varName,
--			type <- ipet_i_c2
--		),
--		ipet_i_c2 : ATL!OclModelElement (
--			name <- thisModule.getSplittedClasses->first().concat('_1'),
--			model <- om
--		),
--		om : ATL!OclModel (
--			name <- self.sourceMM	
--		),
--		op_i_c2 : ATL!OutPattern (
--			
--		)
--
--		do{
--			for (iterator in self.simpleOutPatternElements){
--				op_i_c2.elements <- op_i_c2.elements->append(thisModule.SOPE2SOPE_Splitclass(op_i_c2.elements));
--				self.index_Splitclass <- self.index_Splitclass + 1;
--			}
--			'MatchedRule2MatchedRule_Splitclass_1'.println();
--		}
--}
