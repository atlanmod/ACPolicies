module XACML2ATL;

create OUT: ATL from IN: XACML;

rule Module {
	from
		s : XACML!DocumentRoot
	to
		t : ATL!Module (
			name <- 'Context2Evaluation',
			isRefining <- false,
			inModels <- im,
			outModels <- om,
			elements <- s."rule"
		),
		im : ATL!OclModel (
			name <- 'IN',
			metamodel <- imm
		),
		om : ATL!OclModel (
			name <- 'OUT',
			metamodel <- omm
		),
		imm : ATL!OclModel (
			name <- 'Context'
		),
		omm : ATL!OclModel (
			name <- 'Evaluation'
		)
		do{
			'Module'.println();
			t.elements <- t.elements->append(thisModule.Rule2MatchedRule_DocumentRoot(t.elements))
									->append(thisModule.Rule2Helper(t.elements));
		}
}
lazy rule Rule2Helper {
	from
		s : XACML!RuleType
	
	to
		t : ATL!Helper (
			definition <- oclFD
		),
		oclFD : ATL!OclFeatureDefinition(
			feature <- ope2_1,
			context_ <- oclCD2_1
		),
			ope2_1 : ATL!Operation(
				name <- 'requestFilter',
				parameters <- Sequence{pa3_1, pa3_2, pa3_3},
				returnType <- bo3_4,
				body <- oce3_5
			),
				pa3_1 : ATL!Parameter(
					varName <- 'subject',
					variableExp <- ve4_1,
					type <-st4_2
				),
					ve4_1 : ATL!VariableExp (
						referredVariable <- pa3_1
					),
					st4_2 : ATL!StringType(),
				pa3_2 : ATL!Parameter(
					varName <- 'resource',
					variableExp <- ve4_3,
					type <-st4_4
				),
					ve4_3 : ATL!VariableExp (
						referredVariable <- pa3_2
					),
					st4_4 : ATL!StringType(),
				pa3_3 : ATL!Parameter(
					varName <- 'attribute',
					variableExp <- ve4_5,
					type <-st4_6
				),
					ve4_5 : ATL!VariableExp (
						referredVariable <- pa3_3
					),
					st4_6 : ATL!StringType(),
				bo3_4 : ATL!BooleanType(),
				oce3_5 : ATL!OperatorCallExp (
					operationName <- 'and',
					source <- oce4_7,
					arguments <- Sequence{oce4_8} 
				),
					oce4_7 : ATL!OperatorCallExp (
						operationName <- 'and',
						source <- oce5_1,
						arguments <- Sequence{oce5_2}
					),
						oce5_1 : ATL!OperatorCallExp (
							operationName <- '=',
							source <- noace6_1,
							arguments <- Sequence{ve6_2}
						),
							noace6_1 : ATL!NavigationOrAttributeCallExp (
								name <- 'attributeId',
								source <- coce7_1
							),
								coce7_1 : ATL!CollectionOperationCallExp(
									operationName <- 'first',
									source <- noace8_1
								),
									noace8_1 : ATL!NavigationOrAttributeCallExp (
										name <- 'attribute',
										source <- coce9_1
									),
										coce9_1 : ATL!CollectionOperationCallExp(
											operationName <- 'first',
											source <- noace10_1
										),
											noace10_1 : ATL!NavigationOrAttributeCallExp (
												name <- 'subject',
												source <- ve11_1
											),
												ve11_1 : ATL!VariableExp (
													referredVariable <- vd12_1
												),
													vd12_1 : ATL!VariableDeclaration(
														varName <- 'self',
														variableExp <- ve11_1
													),
							ve6_2 : ATL!VariableExp (
								referredVariable <- pa3_1
							),
						oce5_2 : ATL!OperatorCallExp (
							operationName <- '=',
							source <- noace6_2,
							arguments <- Sequence{ve6_3} 
						),
							noace6_2 : ATL!NavigationOrAttributeCallExp (
								name <- 'attributeId',
								source <- coce7_2
							),
								coce7_2 : ATL!CollectionOperationCallExp(
									operationName <- 'first',
									source <- noace8_2
								),
									noace8_2 : ATL!NavigationOrAttributeCallExp (
										name <- 'attribute',
										source <- noace9_2
									),
										noace9_2 : ATL!NavigationOrAttributeCallExp (
											name <- 'resource',
											source <- ve10_2
										),
											ve10_2 : ATL!VariableExp (
												referredVariable <- vd11_2
											),
												vd11_2 : ATL!VariableDeclaration(
													varName <- 'self',
													variableExp <- ve10_2
												),
							ve6_3 : ATL!VariableExp (
								referredVariable <- pa3_2
							),
					oce4_8 : ATL!OperatorCallExp (
						operationName <- '=',
						source <- noace5_3,
						arguments <- Sequence{ve5_4} 
					),
						noace5_3 : ATL!NavigationOrAttributeCallExp (
							name <- 'attributeId',
							source <- coce6_4
						),
							coce6_4 : ATL!CollectionOperationCallExp(
								operationName <- 'first',
								source <- noace7_3
							),
								noace7_3 : ATL!NavigationOrAttributeCallExp (
									name <- 'attribute',
									source <- noace8_3
								),
									noace8_3 : ATL!NavigationOrAttributeCallExp (
										name <- 'action',
										source <- ve9_3
									),
										ve9_3 : ATL!VariableExp (
											referredVariable <- vd10_3
										),
											vd10_3 : ATL!VariableDeclaration(
												varName <- 'self',
												variableExp <- ve9_3
											),
						ve5_4 : ATL!VariableExp (
							referredVariable <- pa3_3
						),
			oclCD2_1 : ATL!OclContextDefinition(
				context_ <- oclME3_4
			),
				oclME3_4 : ATL!OclModelElement (
					name <- 'RequestType',
					model <- om3_5
				),
				om3_5 : ATL!OclModel (
					name <- 'Context'	
				)
		do{
			'Rule2Helper'.println();
		}
}
--rule DocumentRoot2Output
lazy rule Rule2MatchedRule_DocumentRoot {
	from
		s : XACML!RuleType
	
	to
		mr : ATL!MatchedRule (
			name <- 'DocumentRoot2Output',
			isAbstract <- false,
			isRefining <- false,
			inPattern <- ip_i_c2,
			outPattern <- op_i_c2
		),
		ip_i_c2 : ATL!InPattern (
			elements <- Sequence{ipe_i_c2}
		),
		ipe_i_c2 : ATL!SimpleInPatternElement (
			varName <- 's',
			type <- ipet_i_c2
		),
		ipet_i_c2 : ATL!OclModelElement (
			name <- 'DocumentRoot',
			model <- om
		),
		om : ATL!OclModel (
			name <- 'Context'	
		),
		op_i_c2 : ATL!OutPattern (
			elements <- Sequence{ope_i_c2}
		),
		ope_i_c2 : ATL!SimpleOutPatternElement(
			varName <- 't',
			type <- opet_i_c2,
			bindings <- Sequence{b}
						
		),
		opet_i_c2 : ATL!OclModelElement (
			name <- 'Output',
			model <- om2
		),
		om2 : ATL!OclModel (
			name <- 'Evaluation'
		),
		b : ATL!Binding ( 
			propertyName <- 'evaluations',
			value <- arg
		),
		arg : ATL!NavigationOrAttributeCallExp (
			name <- 'request',
			source <- ve
		),
		ve : ATL!VariableExp (
			referredVariable <- ipe_i_c2	
		)

		do{
			'Rule2MatchedRule_DocumentRoot'.println();
		}
}

rule Rule2MatchedRule {
	from
		s : XACML!RuleType
	
	to
		mr : ATL!MatchedRule (
			name <- s.ruleId, --'loginRule1'
			isNoDefault <- true,
			isAbstract <- false,
			isRefining <- false,
			inPattern <- ip_i_c2,
			outPattern <- op_i_c2,
			actionBlock <- ab
		),
		ip_i_c2 : ATL!InPattern (
			elements <- Sequence{ipe_i_c2},
			filter <- operationce
		),
		ipe_i_c2 : ATL!SimpleInPatternElement (
			varName <- 's',
			type <- ipet_i_c2
		),
		--filter
		operationce : ATL!OperationCallExp (
			operationName <- 'requestFilter',
			source <- ve2_1, 
			arguments <- Sequence{se2_2, se2_3, se2_4}
		),
			ve2_1 : ATL!VariableExp (
				referredVariable <- ipe_i_c2
			),
			se2_2 : ATL!StringExp (
				stringSymbol <- s.target.subjects.anySubject.dataType
			),
			se2_3 : ATL!StringExp (
				stringSymbol <- s.target.resources.anyResource.dataType
			),
			se2_4 : ATL!StringExp (
				stringSymbol <- s.target.actions.anyAction.attributeValue.attributeId
			),
		--names: column_line
--end filter
		
		ipet_i_c2 : ATL!OclModelElement (
			name <- 'RequestType',
			model <- om
		),
		om : ATL!OclModel (
			name <- 'Context'	
		),
		op_i_c2 : ATL!OutPattern (
			elements <- Sequence{ope_i_c2}
		),
		ope_i_c2 : ATL!SimpleOutPatternElement(
			varName <- 't',
			type <- opet_i_c2,
			bindings <- Sequence{b, b2, b3}		
		),
		opet_i_c2 : ATL!OclModelElement (
			name <- 'Evaluation',
			model <- om2
		),
		om2 : ATL!OclModel (
			name <- 'Evaluation'
		),
		b : ATL!Binding ( 
			propertyName <- 'effect',
			value <- se
		),
		se : ATL!StringExp(
			stringSymbol <- s.effect.toString() --'0'
		),
		b2 : ATL!Binding ( 
			propertyName <- 'rulePolicy',
			value <- se2
		),
		se2 : ATL!StringExp(
			stringSymbol <- s.ruleId --'loginRule1'
		),
		b3 : ATL!Binding ( 
			propertyName <- 'request',
			value <- noace
		),
		noace : ATL!NavigationOrAttributeCallExp (
			name <- 'id',
			source <- ve
		),
		ve : ATL!VariableExp (
			referredVariable <- ipe_i_c2
		),	
		--ActionBlock (do)
		ab : ATL!ActionBlock(
			statements <- Sequence{bs}
		),
			bs : ATL!BindingStat(
				commentsBefore <- '--insert the Evaluation in the Output',
				source <- noace3_6,
				value <- coce3_7
			),
				noace3_6 : ATL!NavigationOrAttributeCallExp (
					name <- 'evaluations',
					source <- operationce4_4
				),
					operationce4_4 : ATL!OperationCallExp (
						operationName <- 'resolveTemp',
						source <- ve5_4, 
						arguments <- Sequence{operationce5_5, se5_6}
					),
						ve5_4 : ATL!VariableExp (
							referredVariable <- vd6_31
						),
							vd6_31 : ATL!VariableDeclaration(
								varName <- 'thisModule',
								variableExp <- ve5_4
							),
						operationce5_5 : ATL!OperationCallExp (
							operationName <- 'refImmediateComposite',
							source <- ve6_4
						),
							ve6_4 : ATL!VariableExp (
								referredVariable <- ipe_i_c2	
							),
						se5_6 : ATL!StringExp (
							stringSymbol <- 't'
						),
				coce3_7 : ATL!CollectionOperationCallExp(
					operationName <- 'union',
					source <- noace4_5,
					arguments <- Sequence{seqe}
				),
					noace4_5 : ATL!NavigationOrAttributeCallExp (
						name <- 'evaluations',
						source <- operationce5_6
					),
						operationce5_6 : ATL!OperationCallExp (
							operationName <- 'resolveTemp',
							source <- ve6_5,
							arguments <- Sequence{operationce6_6, se6_7} 
						),
							ve6_5 : ATL!VariableExp (
								referredVariable <- vd7_21
							),
								vd7_21 : ATL!VariableDeclaration(
									varName <- 'thisModule',
									variableExp <- ve6_5
								),
							operationce6_6 : ATL!OperationCallExp (
								operationName <- 'refImmediateComposite',
								source <- ve7_3
							),
								ve7_3 : ATL!VariableExp (
									referredVariable <- ipe_i_c2	
								),
							se6_7 : ATL!StringExp (
								stringSymbol <- 't'
							),
					seqe : ATL!SequenceExp(
						elements <- Sequence{ve5_7}
					),
						ve5_7 : ATL!VariableExp (
							referredVariable <- ope_i_c2	
						)	
		--end ActionBlock (do)
		do{
--			for (iterator in self.simpleOutPatternElements){
--				op_i_c2.elements <- op_i_c2.elements->append(thisModule.SOPE2SOPE(op_i_c2.elements));
--			}
			'Rule2MatchedRule'.println();
		}
}
